[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sarah_Muhlert_ICMB_HS24.git",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nCode# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Parametric equation for the heart shape\nt &lt;- seq(0, 2 * pi, length.out = 1000)\nx &lt;- 16 * sin(t)^3\ny &lt;- 13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)\n\nheart_data &lt;- data.frame(x, y)\n\n# Plotting the heart\nggplot(heart_data, aes(x = x, y = y)) +\n  geom_path(color = \"red\") +\n  coord_equal() +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Sarah_Muhlert_ICMB_HS24.git"
    ]
  },
  {
    "objectID": "hw1/index.html",
    "href": "hw1/index.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Here is a simple plot I created",
    "crumbs": [
      "About",
      "Assignment 1"
    ]
  },
  {
    "objectID": "hw1/index.html#quarto",
    "href": "hw1/index.html#quarto",
    "title": "Assignment 1",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "About",
      "Assignment 1"
    ]
  },
  {
    "objectID": "hw1/index.html#running-code",
    "href": "hw1/index.html#running-code",
    "title": "Assignment 1",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\nCodex &lt;- rnorm(500, mean = 10, sd = 2)\nhist(x)\n\n\n\n\n\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "About",
      "Assignment 1"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\nCode1 + 1\n\n[1] 2\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "hw2/index.html",
    "href": "hw2/index.html",
    "title": "Assignment 2",
    "section": "",
    "text": "okay so first comes the recreation of https://github.com/norvig/pytudes/blob/main/ipynb/Economics.ipynb#js-repo-pjax-container\n\nfor this I used AI (chatGPT) to clarify parts of the python code I didn’t understand - and asked it to explain to me how I could generate a population in R,\nfor how generating a gini coefficient in R works - I looked at this tutorial (https://scales.arabpsychology.com/stats/how-to-calculate-gini-coefficient-in-r-with-example/) - using the inequality package in R. Unfortunatly the package is not supportted with the newest R version, so I asked chatGPT for alternatives. The suggestion was to create a custom gini() function\nI encountered some problems as the wealth included zeros/NA, i searched for help and found resources at R Stackoverflow and had to exclude 0’s. For the simulation step I also asked chatGPT for help and had to adapt the code it generated / same for the simulation visualization (not the histograms) - I hope this gives enough credits, I would have been lost without it\n\n\nCodeset.seed(123)\n#Parameters\n\nN &lt;- 5000        #Default size of the population\n\nMU &lt;- 100        #Default mean of the population\n\nsigma &lt;- MU / 5  #Standard deviation is 1/5 of the mean\n\n#Generate the population\n\npopulation &lt;- rnorm(N, mean = MU, sd = sigma)\npopulation[population &lt;= 0] &lt;- 1\n\n#Create gini function\n\ngini &lt;- function(y) {\n  y &lt;- sort(y)     #Sort pop by wealth in asending order \n  n &lt;- length(y)   #Number of people\n  numer &lt;- 2 * sum((1:n) * y)  #Numerator sum of sorted values weighted by list pos\n  denom &lt;- n * sum(y)  #Denominator total wealth of pop\n    return((numer / denom) - (n + 1) / n) #Compute gini coeffi\n}\n\n# Print initial Gini coefficient\ncat(\"Initial Gini coefficient:\", gini(population), \"\\n\")\n\nInitial Gini coefficient: 0.1121553 \n\nCode#Create hist of pop\n\nlibrary(ggplot2)\n\nhist_pop &lt;- function(population, label='Population') {\n  gini_value &lt;- round(gini(population), 2)\n  label &lt;- paste(label, \"- Gini =\", gini_value)\n  \n  p &lt;- ggplot(data.frame(population), aes(x = population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = label, x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(p)  \n}\n\nhist_pop(population)\n\n\n\n\n\n\nCode# Transaction: Randomly split the pot between two actors\nrandom_split &lt;- function(A, B) {\n  pot &lt;- A + B\n  if (A &lt;= 0 && B &lt;= 0) return(c(0, 0))\n  share &lt;- runif(1, 0, pot)\n  return(c(share, pot - share))\n}\n\n# Randomly select two actors\nanyone &lt;- function(N) sample(1:N, 2)\n\n# Simulation step: Perform one transaction between two random actors\nstep_function &lt;- function(population) {\n  indices &lt;- anyone(length(population))\n  population[indices] &lt;- random_split(population[indices[1]], population[indices[2]])\n  return(population)\n}\n\n# Simulate over T steps\nsimulate &lt;- function(population, T) {\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n  }\n  return(population)\n}\n\n# Run the simulation and visualize the results\nT &lt;- 1000  # Number of steps\nfinal_population &lt;- simulate(population, T)\n\n# Plot final population distribution\nhist_pop(final_population, \"Final Population\")\n\n\n\n\n\n\nCode# Display final Gini coefficient\ncat(\"Final Gini coefficient:\", gini(final_population), \"\\n\")\n\nFinal Gini coefficient: 0.2120456 \n\nCode#Simulation Visualization\n\n# Libraries\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nCode# Percentile Calculation & Results at interbvals\npercent &lt;- function(pct, items) {\n  return(quantile(items, probs = pct / 100))\n}\n\nsimulate_collect &lt;- function(population, T) {\n  results &lt;- list()\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n    if (t %% (T / 10) == 0) {\n      results[[length(results) + 1]] &lt;- list(t = t, pop = sort(population))\n    }\n  }\n  return(results)\n}\n\n#Simulation Visualization Function\nshow_simulation &lt;- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n  N &lt;- length(population)\n  T &lt;- k * N\n  start_population &lt;- population\n  results &lt;- simulate_collect(population, T)\n  \n  \n  cat(sprintf(\"%7s %6s %6s\", \"t\", \"Gini\", \"stdev\"))\n  for (pct in percentiles) {\n    cat(sprintf(\" %4d%%\", pct))\n  }\n  cat(\"\\n\")\n  cat(\"------- ------ ------\")\n  for (i in percentiles) cat(\" ----\")\n  cat(\"\\n\")\n  \n  for (result in results) {\n    pop &lt;- result$pop\n    gini_value &lt;- gini(pop)\n    stdev_value &lt;- sd(pop)\n    percentile_values &lt;- sapply(percentiles, function(pct) percent(pct, pop))\n    \n    \n    fmt &lt;- sprintf(\"%7d %.2f %6.1f\", result$t, gini_value, stdev_value)\n    cat(fmt)\n    cat(sprintf(\"%4.0f\", percentile_values), \"\\n\")\n  }\n  \n  #Percentile plots over time\n  times &lt;- sapply(results, function(res) res$t)\n  plot_data &lt;- data.frame(\n    time = rep(times, each = length(percentiles)),\n    percentile = rep(percentiles, times = length(times)),\n    value = unlist(lapply(results, function(res) sapply(percentiles, function(pct) percent(pct, res$pop))))\n  )\n  \n  p &lt;- ggplot(plot_data, aes(x = value, y = time, color = as.factor(percentile))) +\n    geom_line() +\n    labs(title = \"Percentile Plots Over Time\", x = \"Wealth\", y = \"Time\", color = \"Percentile\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(color = \"grey\")) +\n    scale_y_reverse()  # To match the \"time goes bottom to top\" behavior\n  print(p)\n  \n  # Histograms\n  start_hist &lt;- ggplot(data.frame(start_population), aes(x = start_population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Start Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  final_population &lt;- results[[length(results)]]$pop\n  final_hist &lt;- ggplot(data.frame(final_population), aes(x = final_population)) +\n    geom_histogram(bins = 30, fill = \"green\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Final Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(start_hist)\n  print(final_hist)\n  \n  # Ordered Curves\n  ordered_curves &lt;- data.frame(\n    order = 1:N,\n    start = sort(start_population),\n    end = final_population\n  )\n  \n  ggplot(ordered_curves) +\n    geom_line(aes(x = start, y = order, color = \"Start\")) +\n    geom_line(aes(x = end, y = order, color = \"End\")) +\n    labs(title = \"Ordered Curves\", x = \"Wealth\", y = \"Order\", color = \"Population\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n}\n\n\n#Run\nshow_simulation(population)\n\n      t   Gini  stdev    1%   10%   50%   90%   99%\n------- ------ ------ ---- ---- ---- ---- ----\n  20000 0.49   96.9   1   11   70  226  441 \n  40000 0.49   98.4   1   11   70  232  452 \n  60000 0.50   98.5   1   11   70  227  456 \n  80000 0.50  100.2   1   11   68  235  450 \n 100000 0.50  100.3   1   10   70  235  462 \n 120000 0.51  102.0   1   10   69  232  475 \n 140000 0.50   97.7   1   10   70  232  452 \n 160000 0.49   97.6   1   10   72  225  436 \n 180000 0.49   98.6   1   11   71  226  451 \n 200000 0.49   97.9   1   12   71  228  447 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nokay so this was the recreation of https://github.com/norvig/pytudes/blob/main/ipynb/Economics.ipynb#js-repo-pjax-container\nnow i will play around with it - trying to gain insights\nIdea 1: Introduce Minimum Wealth Threshold\nIn current model, wealth can go very low (even close to zero, although I did not allow zeros since this caused issues). What happens if I set a min wealth threshold, so the poorest people can’t lose their wealth beyond a certain point? This could simulate a sort of “welfare” system that prevents people from becoming too poor - as a first try i set 10 as the minimum wealth\nChange to code: Add condition that prevents wealth from dropping below a certain level.\n\nCodeset.seed(123)\n#Parameters\n\nN &lt;- 5000        #Default size of the population\n\nMU &lt;- 100        #Default mean of the population\n\nsigma &lt;- MU / 5  #Standard deviation is 1/5 of the mean\n\n#Generate the population\n\npopulation &lt;- rnorm(N, mean = MU, sd = sigma)\npopulation[population &lt;= 0] &lt;- 1\n\n#Create gini function\n\ngini &lt;- function(y) {\n  y &lt;- sort(y)     #Sort pop by wealth in asending order \n  n &lt;- length(y)   #Number of people\n  numer &lt;- 2 * sum((1:n) * y)  #Numerator sum of sorted values weighted by list pos\n  denom &lt;- n * sum(y)  #Denominator total wealth of pop\n    return((numer / denom) - (n + 1) / n) #Compute gini coeffi\n}\n\n# Print initial Gini coefficient\ncat(\"Initial Gini coefficient:\", gini(population), \"\\n\")\n\nInitial Gini coefficient: 0.1121553 \n\nCode#Create hist of pop\n\nlibrary(ggplot2)\n\nhist_pop &lt;- function(population, label='Population') {\n  gini_value &lt;- round(gini(population), 2)\n  label &lt;- paste(label, \"- Gini =\", gini_value)\n  \n  p &lt;- ggplot(data.frame(population), aes(x = population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = label, x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(p)  \n}\n\nhist_pop(population)\n\n\n\n\n\n\nCode#Transaction: split the pot but with minimum\nrandom_split &lt;- function(A, B, min_wealth = 10) {\n  pot &lt;- A + B\n  if (A &lt;= min_wealth && B &lt;= min_wealth) return(c(min_wealth, min_wealth))\n  share &lt;- runif(1, 0, pot)\n  return(c(max(share, min_wealth), max(pot - share, min_wealth)))\n}\n\n# Randomly select two actors\nanyone &lt;- function(N) sample(1:N, 2)\n\n# Simulation step: Perform one transaction between two random actors\nstep_function &lt;- function(population) {\n  indices &lt;- anyone(length(population))\n  population[indices] &lt;- random_split(population[indices[1]], population[indices[2]])\n  return(population)\n}\n\n# Simulate over T steps\nsimulate &lt;- function(population, T) {\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n  }\n  return(population)\n}\n\n# Run the simulation and visualize the results\nT &lt;- 1000  # Number of steps\nfinal_population &lt;- simulate(population, T)\n\n# Plot final population distribution\nhist_pop(final_population, \"Final Population\")\n\n\n\n\n\n\nCode# Display final Gini coefficient\ncat(\"Final Gini coefficient:\", gini(final_population), \"\\n\")\n\nFinal Gini coefficient: 0.2109969 \n\nCode#Simulation Visualization\n\n# Libraries\nlibrary(dplyr)\n\n# Percentile Calculation & Results at interbvals\npercent &lt;- function(pct, items) {\n  return(quantile(items, probs = pct / 100))\n}\n\nsimulate_collect &lt;- function(population, T) {\n  results &lt;- list()\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n    if (t %% (T / 10) == 0) {\n      results[[length(results) + 1]] &lt;- list(t = t, pop = sort(population))\n    }\n  }\n  return(results)\n}\n\n#Simulation Visualization Function\nshow_simulation &lt;- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n  N &lt;- length(population)\n  T &lt;- k * N\n  start_population &lt;- population\n  results &lt;- simulate_collect(population, T)\n  \n  \n  cat(sprintf(\"%7s %6s %6s\", \"t\", \"Gini\", \"stdev\"))\n  for (pct in percentiles) {\n    cat(sprintf(\" %4d%%\", pct))\n  }\n  cat(\"\\n\")\n  cat(\"------- ------ ------\")\n  for (i in percentiles) cat(\" ----\")\n  cat(\"\\n\")\n  \n  for (result in results) {\n    pop &lt;- result$pop\n    gini_value &lt;- gini(pop)\n    stdev_value &lt;- sd(pop)\n    percentile_values &lt;- sapply(percentiles, function(pct) percent(pct, pop))\n    \n    \n    fmt &lt;- sprintf(\"%7d %.2f %6.1f\", result$t, gini_value, stdev_value)\n    cat(fmt)\n    cat(sprintf(\"%4.0f\", percentile_values), \"\\n\")\n  }\n  \n  #Percentile plots over time\n  times &lt;- sapply(results, function(res) res$t)\n  plot_data &lt;- data.frame(\n    time = rep(times, each = length(percentiles)),\n    percentile = rep(percentiles, times = length(times)),\n    value = unlist(lapply(results, function(res) sapply(percentiles, function(pct) percent(pct, res$pop))))\n  )\n  \n  p &lt;- ggplot(plot_data, aes(x = value, y = time, color = as.factor(percentile))) +\n    geom_line() +\n    labs(title = \"Percentile Plots Over Time\", x = \"Wealth\", y = \"Time\", color = \"Percentile\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(color = \"grey\")) +\n    scale_y_reverse()  # To match the \"time goes bottom to top\" behavior\n  print(p)\n  \n  # Histograms\n  start_hist &lt;- ggplot(data.frame(start_population), aes(x = start_population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Start Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  final_population &lt;- results[[length(results)]]$pop\n  final_hist &lt;- ggplot(data.frame(final_population), aes(x = final_population)) +\n    geom_histogram(bins = 30, fill = \"green\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Final Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(start_hist)\n  print(final_hist)\n  \n  # Ordered Curves\n  ordered_curves &lt;- data.frame(\n    order = 1:N,\n    start = sort(start_population),\n    end = final_population\n  )\n  \n  ggplot(ordered_curves) +\n    geom_line(aes(x = start, y = order, color = \"Start\")) +\n    geom_line(aes(x = end, y = order, color = \"End\")) +\n    labs(title = \"Ordered Curves\", x = \"Wealth\", y = \"Order\", color = \"Population\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n}\n\n\n#Run\nshow_simulation(population)\n\n      t   Gini  stdev    1%   10%   50%   90%   99%\n------- ------ ------ ---- ---- ---- ---- ----\n  20000 0.48   98.3  10   12   72  232  446 \n  40000 0.48  102.1  10   12   76  241  476 \n  60000 0.49  105.2  10   12   77  247  481 \n  80000 0.49  110.6  10   12   77  260  497 \n 100000 0.49  113.2  10   12   80  270  520 \n 120000 0.50  118.6  10   12   81  270  554 \n 140000 0.49  116.8  10   12   84  280  546 \n 160000 0.48  118.1  10   13   90  276  523 \n 180000 0.48  121.7  10   14   91  283  561 \n 200000 0.49  124.6  10   15   93  292  586 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nokay, looking at the new results the minimum wealth idea worked - no individual is below 10 (as seen in the 1% quantile). I was expecting that the wealth distribution would also in turn become more evenly distributed. But if I am correct, the higher wealth quantiles now accumulate more wealth than they did before (without the minimum wealth: the 90th percentile starts at 226 units of wealth and ends at 228. The 99th percentile starts at 441 and ends at 447; with the wealth minimum: The 90th percentile starts at 232 and ends at 292. The 99th percentile starts at 446 and ends at 586.)\nIntroducing a minimum wealth threshold has some protective effect for the poorest individuals, preventing them from falling into extreme poverty. But I think now the richer individulals get even richer than without the minimum and even quicker as well - why I have no idea. The gini coefficient stays roughly the same.\nIdea 2: Make the initial population more unequal and see what happens\nNext, I will experiment and make the wealth distribution in the starting population more unequal, creating 100 individual that are wealthy and 4900 individuals that are poor (for how to code this I also asked chatGPT)\nI am expecting to see similar results as before - very high inequality and even higher wealth accumulation for the wealthy people\nChange to code: different wealth distribution, creating two groups (weatlhy: having 1000 vs poor: having 10)\n\nCodeset.seed(123)\nN &lt;- 5000        # Total population size\nwealthy_count &lt;- 100   # Number of wealthy individuals\npoor_count &lt;- N - wealthy_count  # Number of poor individuals\n\n# Generate the population with more inequality\nwealthy_wealth &lt;- 1000  # Wealth of the wealthy individuals\npoor_wealth &lt;- 10       # Wealth of the poor individuals\n\n# Create the population\npopulation &lt;- c(rep(wealthy_wealth, wealthy_count), rep(poor_wealth, poor_count))\n\n#Create gini function\n\ngini &lt;- function(y) {\n  y &lt;- sort(y)     #Sort pop by wealth in asending order \n  n &lt;- length(y)   #Number of people\n  numer &lt;- 2 * sum((1:n) * y)  #Numerator sum of sorted values weighted by list pos\n  denom &lt;- n * sum(y)  #Denominator total wealth of pop\n    return((numer / denom) - (n + 1) / n) #Compute gini coeffi\n}\n\n# Print initial Gini coefficient using Gini() from DescTools\ncat(\"Initial Gini coefficient:\", gini(population), \"\\n\")\n\nInitial Gini coefficient: 0.6511409 \n\nCode#Create hist of pop\n\nlibrary(ggplot2)\n\nhist_pop &lt;- function(population, label='Population') {\n  gini_value &lt;- round(gini(population), 2)\n  label &lt;- paste(label, \"- Gini =\", gini_value)\n  \n  p &lt;- ggplot(data.frame(population), aes(x = population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = label, x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(p)  \n}\n\nhist_pop(population)\n\n\n\n\n\n\nCode# Transaction: Randomly split the pot between two actors\nrandom_split &lt;- function(A, B) {\n  pot &lt;- A + B\n  if (A &lt;= 0 && B &lt;= 0) return(c(0, 0))\n  share &lt;- runif(1, 0, pot)\n  return(c(share, pot - share))\n}\n\n# Randomly select two actors\nanyone &lt;- function(N) sample(1:N, 2)\n\n# Simulation step: Perform one transaction between two random actors\nstep_function &lt;- function(population) {\n  indices &lt;- anyone(length(population))\n  population[indices] &lt;- random_split(population[indices[1]], population[indices[2]])\n  return(population)\n}\n\n# Simulate over T steps\nsimulate &lt;- function(population, T) {\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n  }\n  return(population)\n}\n\n# Run the simulation and visualize the results\nT &lt;- 1000  # Number of steps\nfinal_population &lt;- simulate(population, T)\n\n# Plot final population distribution\nhist_pop(final_population, \"Final Population\")\n\n\n\n\n\n\nCode# Display final Gini coefficient\ncat(\"Final Gini coefficient:\", gini(final_population), \"\\n\")\n\nFinal Gini coefficient: 0.6993424 \n\nCode#Simulation Visualization\n\n# Libraries\nlibrary(dplyr)\n\n# Percentile Calculation & Results at interbvals\npercent &lt;- function(pct, items) {\n  return(quantile(items, probs = pct / 100))\n}\n\nsimulate_collect &lt;- function(population, T) {\n  results &lt;- list()\n  for (t in 1:T) {\n    population &lt;- step_function(population)\n    if (t %% (T / 10) == 0) {\n      results[[length(results) + 1]] &lt;- list(t = t, pop = sort(population))\n    }\n  }\n  return(results)\n}\n\n#Simulation Visualization Function\nshow_simulation &lt;- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n  N &lt;- length(population)\n  T &lt;- k * N\n  start_population &lt;- population\n  results &lt;- simulate_collect(population, T)\n  \n  \n  cat(sprintf(\"%7s %6s %6s\", \"t\", \"Gini\", \"stdev\"))\n  for (pct in percentiles) {\n    cat(sprintf(\" %4d%%\", pct))\n  }\n  cat(\"\\n\")\n  cat(\"------- ------ ------\")\n  for (i in percentiles) cat(\" ----\")\n  cat(\"\\n\")\n  \n  for (result in results) {\n    pop &lt;- result$pop\n    gini_value &lt;- gini(pop)\n    stdev_value &lt;- sd(pop)\n    percentile_values &lt;- sapply(percentiles, function(pct) percent(pct, pop))\n    \n    \n    fmt &lt;- sprintf(\"%7d %.2f %6.1f\", result$t, gini_value, stdev_value)\n    cat(fmt)\n    cat(sprintf(\"%4.0f\", percentile_values), \"\\n\")\n  }\n  \n  #Percentile plots over time\n  times &lt;- sapply(results, function(res) res$t)\n  plot_data &lt;- data.frame(\n    time = rep(times, each = length(percentiles)),\n    percentile = rep(percentiles, times = length(times)),\n    value = unlist(lapply(results, function(res) sapply(percentiles, function(pct) percent(pct, res$pop))))\n  )\n  \n  p &lt;- ggplot(plot_data, aes(x = value, y = time, color = as.factor(percentile))) +\n    geom_line() +\n    labs(title = \"Percentile Plots Over Time\", x = \"Wealth\", y = \"Time\", color = \"Percentile\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(color = \"grey\")) +\n    scale_y_reverse()  # To match the \"time goes bottom to top\" behavior\n  print(p)\n  \n  # Histograms\n  start_hist &lt;- ggplot(data.frame(start_population), aes(x = start_population)) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Start Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  final_population &lt;- results[[length(results)]]$pop\n  final_hist &lt;- ggplot(data.frame(final_population), aes(x = final_population)) +\n    geom_histogram(bins = 30, fill = \"green\", color = \"black\", alpha = 0.5) +\n    labs(title = \"Final Population Histogram\", x = \"Wealth\", y = \"Count\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n  \n  print(start_hist)\n  print(final_hist)\n  \n  # Ordered Curves\n  ordered_curves &lt;- data.frame(\n    order = 1:N,\n    start = sort(start_population),\n    end = final_population\n  )\n  \n  ggplot(ordered_curves) +\n    geom_line(aes(x = start, y = order, color = \"Start\")) +\n    geom_line(aes(x = end, y = order, color = \"End\")) +\n    labs(title = \"Ordered Curves\", x = \"Wealth\", y = \"Order\", color = \"Population\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(colour = \"grey\"))\n}\n\n\n#Run\nshow_simulation(population)\n\n      t   Gini  stdev    1%   10%   50%   90%   99%\n------- ------ ------ ---- ---- ---- ---- ----\n  20000 0.61   50.4   0    2   15   68  229 \n  40000 0.51   31.5   0    3   21   68  148 \n  60000 0.50   29.5   0    3   21   69  135 \n  80000 0.50   29.7   0    3   21   70  137 \n 100000 0.50   29.3   0    3   21   69  132 \n 120000 0.50   30.0   0    3   20   69  136 \n 140000 0.50   29.5   0    3   21   70  136 \n 160000 0.50   29.5   0    3   21   69  138 \n 180000 0.49   29.1   0    3   21   67  132 \n 200000 0.50   29.8   0    3   21   68  134 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking at the difference between this simulation and the first, here the initial Gini coefficient is much higher compared. I think this suggests, that the wealth distribution at the beginning is much more unequal - which is exactly what I wanted. After 20000 simulations it drops and stabilizes at around 0.51, suggesting that the system equalizes the wealth over time (a little bit at least - unequality is still high).\nThe 99th percentile drops significantly (from 229 to 134), indicating that the wealthiest individuals are losing wealth over time. However, they remain far richer than the rest of the population, which suggests that the random wealth transfers aren’t sufficient to equalize wealth entirely. I guess with the super high amount of inequality I created this is not very surprising.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 2"
    ]
  }
]